// IndexedDB –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö RPG
// –ú–æ–¥—É–ª—å debug.js –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ —Ç–µ–≥ script –≤ HTML

const DB_NAME = 'rpgDatabase';
// –í–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–æ–≤–∞—è), –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º update_version.py
const DB_APP_VERSION = '1.1.32';
// –ß–∏—Å–ª–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã
const DB_VERSION = 10;

let db;

// –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –ü–û–õ–£–ß–ï–ù–ò–Ø TELEGRAMID
window.ensureTelegramId = async (maxAttempts = 10, delayMs = 500) => {
  console.log('[EnsureTelegramId] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ telegramId...');
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    console.log(`[EnsureTelegramId] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}`);
    
    let telegramId = null;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
      console.log(`[EnsureTelegramId] ‚úÖ telegramId –Ω–∞–π–¥–µ–Ω –≤ Telegram WebApp: ${telegramId}`);
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!telegramId) {
      const urlParams = new URLSearchParams(window.location.search);
      const tgIdFromUrl = urlParams.get('tgId');
      if (tgIdFromUrl) {
        telegramId = tgIdFromUrl;
        console.log(`[EnsureTelegramId] ‚úÖ telegramId –Ω–∞–π–¥–µ–Ω –≤ URL: ${telegramId}`);
      }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: localStorage
    if (!telegramId) {
      telegramId = localStorage.getItem('telegramId');
      if (telegramId) {
        console.log(`[EnsureTelegramId] ‚úÖ telegramId –Ω–∞–π–¥–µ–Ω –≤ localStorage: ${telegramId}`);
      }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: sessionStorage
    if (!telegramId) {
      telegramId = sessionStorage.getItem('telegramId');
      if (telegramId) {
        console.log(`[EnsureTelegramId] ‚úÖ telegramId –Ω–∞–π–¥–µ–Ω –≤ sessionStorage: ${telegramId}`);
      }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    if (!telegramId && window.globalTelegramId) {
      telegramId = window.globalTelegramId;
      console.log(`[EnsureTelegramId] ‚úÖ telegramId –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${telegramId}`);
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ telegramId, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∑–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if (telegramId) {
      localStorage.setItem('telegramId', telegramId);
      sessionStorage.setItem('telegramId', telegramId);
      window.globalTelegramId = telegramId;
      
      console.log(`[EnsureTelegramId] üéâ telegramId —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${telegramId}`);
      return telegramId;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    console.log(`[EnsureTelegramId] ‚è≥ telegramId –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ ${delayMs}ms...`);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
    if (attempt <= 3 && window.Telegram && window.Telegram.WebApp) {
      try {
        console.log(`[EnsureTelegramId] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        if (typeof window.Telegram.WebApp.ready === 'function') {
          window.Telegram.WebApp.ready();
        }
        if (typeof window.Telegram.WebApp.expand === 'function') {
          window.Telegram.WebApp.expand();
        }
      } catch (error) {
        console.warn(`[EnsureTelegramId] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:`, error);
      }
    }
    
    await new Promise(resolve => setTimeout(resolve, delayMs));
  }
  
  console.error(`[EnsureTelegramId] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  return null;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = (event) => {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      reject(event.target.error);
    };
    
    request.onsuccess = async (event) => {
      db = event.target.result;
      
      console.log('[IndexedDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º telegramId
      const telegramId = await window.ensureTelegramId();
      
      if (!telegramId) {
        console.error('[IndexedDB] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId!');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      const urlParams = new URLSearchParams(window.location.search);
      const freshInstall = urlParams.get('freshInstall');
      const tgIdFromUrl = urlParams.get('tgId');
      const isMobile = urlParams.get('mobile');
      
      if (freshInstall) {
        console.log(`[IndexedDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä freshInstall —Å –≤–µ—Ä—Å–∏–µ–π ${freshInstall}`);
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegramId –∏–∑ URL –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (tgIdFromUrl && tgIdFromUrl !== telegramId) {
          localStorage.setItem('telegramId', tgIdFromUrl);
          sessionStorage.setItem('telegramId', tgIdFromUrl);
          window.globalTelegramId = tgIdFromUrl;
          console.log(`[IndexedDB] telegramId –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ URL: ${tgIdFromUrl}`);
        }
        
        if (isMobile) {
          console.log('[IndexedDB] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ URL –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        localStorage.setItem('app_version', freshInstall);
        saveAppVersion(freshInstall).then(async () => {
          console.log(`[IndexedDB] –í–µ—Ä—Å–∏—è ${freshInstall} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
          
          // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
          try {
            await loadSpecialResourcesIfNeeded();
            console.log('[IndexedDB] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            resolve(db);
          } catch (error) {
            console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
            resolve(db); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        }).catch(error => {
          console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
          resolve(db);
        });
      } else {
        // –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏
        try {
          const isVersionMatch = await checkAppVersion();
          if (!isVersionMatch) {
            console.warn('[IndexedDB] –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
            try {
              await clearSiteData();
              // –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–¥–µ—Å—å, —Ç.–∫. clearSiteData —É–∂–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ
              // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ clearSiteData —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º freshInstall
            } catch (error) {
              console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
              resolve(db);
            }
          } else {
            console.log('[IndexedDB] –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞');
            resolve(db);
          }
        } catch (error) {
          console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
          resolve(db); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏
        }
      }
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      
      // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
      if (!db.objectStoreNames.contains('inventory')) {
        db.createObjectStore('inventory', { keyPath: 'id' });
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (!db.objectStoreNames.contains('appVersion')) {
        db.createObjectStore('appVersion');
      }
    };
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ IndexedDB
const saveAppVersion = async (version = null) => {
  if (!db) await initDB();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –±–µ—Ä–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const versionToSave = version || DB_APP_VERSION;
  
  return new Promise((resolve, reject) => {
    try {
      const transaction = db.transaction(['appVersion'], 'readwrite');
      const store = transaction.objectStore('appVersion');
      
      const versionData = {
        value: versionToSave,
        timestamp: new Date().toISOString()
      };
      
      const request = store.put(versionData, 'current');
      
      request.onsuccess = () => {
        console.log(`[IndexedDB] –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${versionToSave} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ appVersion`);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –≤ localStorage –¥–ª—è –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        localStorage.setItem('app_version', versionToSave);
        
        resolve(true);
      };
      
      request.onerror = (event) => {
        console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É appVersion');
        reject(event.target.error);
      };
    } catch (error) {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ –≤ saveAppVersion:', error);
      reject(error);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const checkAppVersion = async () => {
  if (!db) await initDB();
  
  return new Promise((resolve, reject) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ appVersion
      if (!db.objectStoreNames.contains('appVersion')) {
        console.log('[IndexedDB] –¢–∞–±–ª–∏—Ü–∞ appVersion –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
        resolve(false);
        return;
      }
      
      const transaction = db.transaction(['appVersion'], 'readonly');
      const store = transaction.objectStore('appVersion');
      
      const request = store.get('current');
      
      request.onsuccess = (event) => {
        const storedVersionData = event.target.result;
        const storedVersion = storedVersionData ? storedVersionData.value : null;
        const localStorageVersion = localStorage.getItem('app_version');
        
        console.log(`[IndexedDB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 
          –¢–µ–∫—É—â–∞—è: ${DB_APP_VERSION}, 
          –í appVersion: ${storedVersion || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, 
          –í localStorage: ${localStorageVersion || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        
        // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç –≤ IndexedDB –∏–ª–∏ localStorage, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (!storedVersion && !localStorageVersion) {
          saveAppVersion().then(() => resolve(true)).catch(() => resolve(true));
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
        const isVersionMatch = (storedVersion === DB_APP_VERSION) && (localStorageVersion === DB_APP_VERSION);
        
        if (!isVersionMatch) {
          console.warn(`[IndexedDB] –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: 
            –° ${storedVersion || localStorageVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π'} 
            –Ω–∞ ${DB_APP_VERSION}`);
        }
        
        resolve(isVersionMatch);
      };
      
      request.onerror = (event) => {
        console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        reject(event.target.error);
      };
    } catch (error) {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ –≤ checkAppVersion:', error);
      reject(error);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞
const clearSiteData = async () => {
  console.log('[ClearSiteData] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞...');
  
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º telegramId –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π - –ü–†–ò–û–†–ò–¢–ï–¢ –¥–ª—è Telegram WebApp
    let savedTelegramId = null;
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: Telegram WebApp (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      savedTelegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
      console.log('[ClearSiteData] telegramId –ø–æ–ª—É—á–µ–Ω –∏–∑ Telegram WebApp (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):', savedTelegramId);
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: localStorage (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    if (!savedTelegramId && localStorage.getItem('telegramId')) {
      savedTelegramId = localStorage.getItem('telegramId');
      console.log('[ClearSiteData] telegramId –ø–æ–ª—É—á–µ–Ω –∏–∑ localStorage (—Ä–µ–∑–µ—Ä–≤):', savedTelegramId);
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Telegram WebApp
    if (!savedTelegramId && window.Telegram && window.Telegram.WebApp) {
      try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebApp
        if (typeof window.Telegram.WebApp.ready === 'function') {
          window.Telegram.WebApp.ready();
        }
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
        if (window.Telegram.WebApp.initDataUnsafe && 
            window.Telegram.WebApp.initDataUnsafe.user && 
            window.Telegram.WebApp.initDataUnsafe.user.id) {
          savedTelegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
          console.log('[ClearSiteData] telegramId –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', savedTelegramId);
        }
      } catch (initError) {
        console.warn('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', initError);
      }
    }
    
    if (!savedTelegramId) {
      console.error('[ClearSiteData] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!');
    }
    
    // 1. –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ Telegram WebApp
    console.log('[ClearSiteData] –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è Telegram WebApp...');
    
    // 1.1. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ Storage
    try {
      // localStorage
      localStorage.clear();
      console.log('[ClearSiteData] localStorage –æ—á–∏—â–µ–Ω');
      
      // sessionStorage  
      sessionStorage.clear();
      console.log('[ClearSiteData] sessionStorage –æ—á–∏—â–µ–Ω');
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è Telegram –¥–∞–Ω–Ω—ã—Ö
      ['TelegramWebViewData', 'telegram-web-data', 'tgWebAppData'].forEach(key => {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
      });
      console.log('[ClearSiteData] Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      
    } catch (storageError) {
      console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Storage:', storageError);
    }
    
    // 1.2. –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú telegramId –ü–ï–†–í–´–ú –ü–†–ò–û–†–ò–¢–ï–¢–û–ú
    if (savedTelegramId) {
      localStorage.setItem('telegramId', savedTelegramId);
      sessionStorage.setItem('telegramId', savedTelegramId); // –î—É–±–ª–∏—Ä—É–µ–º –≤ sessionStorage
      console.log('[ClearSiteData] telegramId –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:', savedTelegramId);
    }
    
    // 2. –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê IndexedDB –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log('[ClearSiteData] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É IndexedDB...');
    let dbsCleared = true;
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
      if (db) {
        db.close();
        db = null;
      }
      if (userResourcesDb) {
        userResourcesDb.close();
        userResourcesDb = null;
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      if (window.db) {
        window.db.close();
        window.db = null;
      }
      if (window.userResourcesDb) {
        window.userResourcesDb.close();
        window.userResourcesDb = null;
      }
      
      console.log('[ClearSiteData] –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ—Ç–æ–¥–∞ databases()
      if ('databases' in window.indexedDB) {
        const databases = await window.indexedDB.databases();
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞–∑
        const deletePromises = databases.map(dbInfo => 
          new Promise((resolve) => {
            console.log(`[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbInfo.name}...`);
            const deleteRequest = indexedDB.deleteDatabase(dbInfo.name);
            
            deleteRequest.onsuccess = () => {
              console.log(`[ClearSiteData] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${dbInfo.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
              resolve(true);
            };
            
            deleteRequest.onerror = (event) => {
              console.error(`[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbInfo.name}:`, event.target.error);
              dbsCleared = false;
              resolve(false);
            };
            
            // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ blocked
            deleteRequest.onblocked = () => {
              console.warn(`[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbInfo.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
              dbsCleared = false;
              resolve(false);
            };
          })
        );
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è
        await Promise.all(deletePromises);
      } else {
        // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ databases() –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —è–≤–Ω–æ —É–¥–∞–ª—è–µ–º –Ω–∞—à—É –±–∞–∑—É
        await new Promise((resolve) => {
          console.log('[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö rpgDatabase...');
          const deleteRequest = indexedDB.deleteDatabase(DB_NAME);
          
          deleteRequest.onsuccess = () => {
            console.log('[ClearSiteData] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö rpgDatabase —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            resolve(true);
          };
          
          deleteRequest.onerror = (event) => {
            console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö rpgDatabase:', event.target.error);
            dbsCleared = false;
            resolve(false);
          };
          
          deleteRequest.onblocked = () => {
            console.warn('[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö rpgDatabase –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
            dbsCleared = false;
            resolve(false);
          };
        });
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º UserResourcesDB
        await new Promise((resolve) => {
          console.log('[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UserResourcesDB...');
          const deleteRequest = indexedDB.deleteDatabase('UserResourcesDB');
          
          deleteRequest.onsuccess = () => {
            console.log('[ClearSiteData] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö UserResourcesDB —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            resolve(true);
          };
          
          deleteRequest.onerror = () => {
            // –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ —ç—Ç–æ–π –±–∞–∑—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ
            console.log('[ClearSiteData] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö UserResourcesDB –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞');
            resolve(true);
          };
        });
      }
    } catch (dbError) {
      console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ IndexedDB:', dbError);
      dbsCleared = false;
    }
    
    // 3. –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê COOKIES –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    try {
      console.log('[ClearSiteData] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É cookies...');
      
      const cookies = document.cookie.split(";");
      console.log(`[ClearSiteData] –ù–∞–π–¥–µ–Ω–æ ${cookies.length} cookies –¥–ª—è –æ—á–∏—Å—Ç–∫–∏`);
      
      // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏ –ø—É—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      const domains = [
        window.location.hostname,
        '.' + window.location.hostname,
        window.location.hostname.split('.').slice(1).join('.'),
        '.' + window.location.hostname.split('.').slice(1).join('.'),
        window.location.hostname.split('.').slice(-2).join('.'),
        '.' + window.location.hostname.split('.').slice(-2).join('.'),
        'localhost',
        '.localhost',
        'tonion.io',
        '.tonion.io',
        'test.tonion.io',
        '.test.tonion.io'
      ].filter(domain => domain && domain !== '.');
      
      const paths = ['/', '/public', '/source', '/js', '/style'];
      
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i];
        const eqPos = cookie.indexOf("=");
        const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
        
        if (name) {
          console.log(`[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ cookie: ${name}`);
          
          // –£–¥–∞–ª—è–µ–º cookie –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–æ–º–µ–Ω–æ–≤ –∏ –ø—É—Ç–µ–π
          for (const domain of domains) {
            for (const path of paths) {
              try {
                // –£–¥–∞–ª—è–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–º–µ–Ω–∞ –∏ –ø—É—Ç–∏
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path};domain=${domain}`;
                // –£–¥–∞–ª—è–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path}`;
                // –£–¥–∞–ª—è–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=${domain}`;
                // –ë–∞–∑–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
              } catch (deleteCookieError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö cookies
              }
            }
          }
        }
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è Telegram cookies
      const telegramCookies = ['tgWebAppData', 'telegram_auth', 'telegram_user'];
      for (const tgCookie of telegramCookies) {
        for (const domain of domains) {
          for (const path of paths) {
            document.cookie = `${tgCookie}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path};domain=${domain}`;
            document.cookie = `${tgCookie}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path}`;
            document.cookie = `${tgCookie}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=${domain}`;
            document.cookie = `${tgCookie}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
          }
        }
      }
      
      console.log('[ClearSiteData] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ cookies –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (cookieError) {
      console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ cookies:', cookieError);
    }
    
    // 4. –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    try {
      console.log('[ClearSiteData] –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...');
      
      // 4.1. Service Worker –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      if ('serviceWorker' in navigator) {
        try {
          const registrations = await navigator.serviceWorker.getRegistrations();
          console.log(`[ClearSiteData] –ù–∞–π–¥–µ–Ω–æ ${registrations.length} Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π`);
          
          for (const registration of registrations) {
            console.log('[ClearSiteData] –£–¥–∞–ª–µ–Ω–∏–µ Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
            await registration.unregister();
          }
          console.log('[ClearSiteData] –í—Å–µ Service Workers —É–¥–∞–ª–µ–Ω—ã');
        } catch (swError) {
          console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Service Workers:', swError);
        }
      }
      
      // 4.2. –ö—ç—à Storage –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      if ('caches' in window) {
        const cacheNames = await caches.keys();
        console.log(`[ClearSiteData] –ù–∞–π–¥–µ–Ω–æ ${cacheNames.length} –∫—ç—à–µ–π:`, cacheNames);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫—ç—à
        for (const cacheName of cacheNames) {
          try {
            const deleted = await caches.delete(cacheName);
            console.log(`[ClearSiteData] –ö—ç—à ${cacheName} —É–¥–∞–ª–µ–Ω:`, deleted);
          } catch (deleteError) {
            console.error(`[ClearSiteData] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∞ ${cacheName}:`, deleteError);
          }
        }
        console.log('[ClearSiteData] –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Cache Storage –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
      
      // 4.3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Telegram WebApp
      if (window.Telegram && window.Telegram.WebApp) {
        try {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          if (typeof window.Telegram.WebApp.close === 'function') {
            console.log('[ClearSiteData] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram WebApp...');
            // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º close() –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          }
          
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ WebApp –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã
          if (typeof window.Telegram.WebApp.clearStorage === 'function') {
            window.Telegram.WebApp.clearStorage();
            console.log('[ClearSiteData] –í—ã–∑–≤–∞–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ Telegram WebApp Storage');
          }
        } catch (tgError) {
          console.warn('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram WebApp:', tgError);
        }
      }
      
    } catch (cacheError) {
      console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', cacheError);
    }
    
    // 5. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API Clear-Site-Data –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω (–æ—á–∏—â–∞–µ—Ç –≤—Å—ë)
    try {
      if ('fetch' in window) {
        const clearDataResponse = await fetch('/', {
          method: 'HEAD',
          headers: {
            'Clear-Site-Data': '"cache", "cookies", "storage", "executionContexts"'
          }
        });
        
        if (clearDataResponse.ok) {
          console.log('[ClearSiteData] –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Clear-Site-Data API');
        }
      }
    } catch (clearDataError) {
      console.error('[ClearSiteData] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Clear-Site-Data API:', clearDataError);
    }
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï telegramId
    console.log('[ClearSiteData] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –≤ localStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
    localStorage.setItem('app_version', DB_APP_VERSION);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ telegramId
    if (savedTelegramId) {
      localStorage.setItem('telegramId', savedTelegramId);
      sessionStorage.setItem('telegramId', savedTelegramId);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      window.globalTelegramId = savedTelegramId;
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
      const verifyLocal = localStorage.getItem('telegramId');
      const verifySession = sessionStorage.getItem('telegramId');
      
      if (verifyLocal === savedTelegramId && verifySession === savedTelegramId) {
        console.log('[ClearSiteData] ‚úÖ telegramId —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö:', savedTelegramId);
      } else {
        console.error('[ClearSiteData] ‚ùå –û–®–ò–ë–ö–ê: telegramId –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', {
          saved: savedTelegramId,
          localStorage: verifyLocal,
          sessionStorage: verifySession
        });
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        localStorage.setItem('telegramId', savedTelegramId);
        sessionStorage.setItem('telegramId', savedTelegramId);
      }
    } else {
      console.error('[ClearSiteData] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: savedTelegramId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
    }
    
    console.log(`[ClearSiteData] –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–µ—Ä—Å–∏—è ${DB_APP_VERSION} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ –∏–∑ –∫—ç—à–∞)
    console.log('[ClearSiteData] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const baseUrl = window.location.href.split('?')[0];
    const timestamp = Date.now();
    const version = encodeURIComponent(DB_APP_VERSION);
    
    let reloadUrl = `${baseUrl}?v=${timestamp}&freshInstall=${version}&mobile=1`;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å telegramId, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É
    if (savedTelegramId) {
      reloadUrl += `&tgId=${encodeURIComponent(savedTelegramId)}`;
      console.log('[ClearSiteData] URL –≤–∫–ª—é—á–∞–µ—Ç telegramId –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã');
    }
    
    console.log('[ClearSiteData] URL –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', reloadUrl);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    setTimeout(() => {
      console.log('[ClearSiteData] üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É...');
      window.location.href = reloadUrl;
    }, 1000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    return true;
  } catch (error) {
    console.error('[ClearSiteData] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞:', error);
    
    // –ü—Ä–∏ –ª—é–±–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    setTimeout(() => {
      window.location.reload(true);
    }, 1000);
    
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const saveUserResources = async (resources) => {
  console.log('[IndexedDB] saveUserResources: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ UserResourcesDB');
  
  // –ü–æ–ª—É—á–∞–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let telegramId;
  if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
      window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
    telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
  } else {
    telegramId = localStorage.getItem('telegramId');
  }
  
  if (!telegramId) {
    console.error('[IndexedDB] saveUserResources: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
    return Promise.reject('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
  }
  
  try {
    await saveUserResourcesInUserDB(telegramId, resources);
    return Promise.resolve();
  } catch (error) {
    console.error('[IndexedDB] saveUserResources: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ UserResourcesDB', error);
    return Promise.reject(error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserResources = async () => {
  console.log('[IndexedDB] getUserResources: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ UserResourcesDB');
  
  // –ü–æ–ª—É—á–∞–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let telegramId;
  if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
      window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
    telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
  } else {
    telegramId = localStorage.getItem('telegramId');
  }
  
  if (!telegramId) {
    console.error('[IndexedDB] getUserResources: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
    return Promise.resolve({});
  }
  
  try {
    const resources = await getUserResourcesFromUserDB(telegramId);
    return Promise.resolve(resources || {});
  } catch (error) {
    console.error('[IndexedDB] getUserResources: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ UserResourcesDB', error);
    return Promise.resolve({});
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId (–±–µ—Ä–µ—Ç –∏–∑ UserResourcesDB)
const getUserResourcesFromIndexedDB = async (telegramId) => {
  console.log('[IndexedDB] getUserResourcesFromIndexedDB: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ UserResourcesDB');
  
  if (!telegramId) {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
    } else {
      telegramId = localStorage.getItem('telegramId');
    }
    
    if (!telegramId) {
      console.error('[IndexedDB] getUserResourcesFromIndexedDB: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
      return null;
    }
  }
  
  try {
    const resources = await getUserResourcesFromUserDB(telegramId);
    
    if (resources) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      window.globalUserResources = {...resources};
      return resources;
    } else {
      console.log('[IndexedDB] getUserResourcesFromIndexedDB: –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é');
      return window.globalUserResources || {};
    }
  } catch (error) {
    console.error('[IndexedDB] getUserResourcesFromIndexedDB: –û—à–∏–±–∫–∞', error.message);
    return window.globalUserResources || {};
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ telegramId (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç UserResourcesDB)
const saveUserResourcesToIndexedDB = async (resources, telegramId) => {
  console.log('[IndexedDB] saveUserResourcesToIndexedDB: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ UserResourcesDB');
  
  // –ï—Å–ª–∏ telegramId –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
  if (!telegramId) {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
    } else {
      telegramId = localStorage.getItem('telegramId');
    }
    
    if (!telegramId) {
      console.error('[IndexedDB] saveUserResourcesToIndexedDB: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
      return Promise.reject('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
    }
  }
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.globalUserResources = {...resources};
    
    await saveUserResourcesInUserDB(telegramId, resources);
    return Promise.resolve();
  } catch (error) {
    console.error('[IndexedDB] saveUserResourcesToIndexedDB: –û—à–∏–±–∫–∞', error.message);
    return Promise.reject(error);
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
const createCraftingSession = async (userId, recipeId, quantity, requiredMaterials, craftTime) => {
  console.log('[IndexedDB] createCraftingSession: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
  
  try {
    const currentTime = Math.floor(Date.now() / 1000);
    const endTime = currentTime + (craftTime * quantity);
    
    const session = {
      telegramId: userId,
      itemId: recipeId,
      itemName: recipeId, // –ò–º—è –±–µ—Ä–µ–º –∏–∑ recipeId –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      quantity,
      materials: JSON.stringify(requiredMaterials),
      craftTime,
      startTime: currentTime,
      endTime
    };
    
    const response = await fetch('rpg.php?action=craftItem', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(session)
    });
    
    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    return data.sessionId || Date.now(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–µ—Å—Å–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
  } catch (error) {
    console.error('[IndexedDB] createCraftingSession: –û—à–∏–±–∫–∞', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—É—á–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞)
const getActiveCraftingSessions = async (userId) => {
  console.log('[IndexedDB] getActiveCraftingSessions: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await fetch(`rpg.php?action=getActiveCraftingSessions&telegramId=${encodeURIComponent(userId)}`);
    
    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    return data.activeCraftingSessions || [];
  } catch (error) {
    console.error('[IndexedDB] getActiveCraftingSessions: –û—à–∏–±–∫–∞', error);
    return [];
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
const updateCraftingSession = async (sessionId, updates) => {
  console.log('[IndexedDB] updateCraftingSession: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let telegramId;
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
    } else {
      telegramId = localStorage.getItem('telegramId');
    }
    
    if (!telegramId) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
    }
    
    const updateData = {
      sessionId: sessionId,
      telegramId,
      status: updates.status || 'active',
      lastUpdated: Math.floor(Date.now() / 1000)
    };
    
    const response = await fetch('rpg.php?action=updateCraftingSession', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updateData)
    });
    
    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    return {
      ...updates,
      lastUpdated: updateData.lastUpdated
    };
  } catch (error) {
    console.error('[IndexedDB] updateCraftingSession: –û—à–∏–±–∫–∞', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
const deleteCraftingSession = async (sessionId) => {
  console.log('[IndexedDB] deleteCraftingSession: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let telegramId;
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
    } else {
      telegramId = localStorage.getItem('telegramId');
    }
    
    if (!telegramId) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId');
    }
    
    const deleteData = {
      sessionId: sessionId,
      telegramId,
      status: 'deleted'
    };
    
    const response = await fetch('rpg.php?action=deleteCraftingSession', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(deleteData)
    });
    
    if (!response.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    return true;
  } catch (error) {
    console.error('[IndexedDB] deleteCraftingSession: –û—à–∏–±–∫–∞', error);
    return false;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ IndexedDB
 * @param {string} itemId - ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {Object} itemData - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å id, name, quantity)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
const updateInventoryItem = async (itemId, itemData) => {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.error('[IndexedDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      reject('Database not initialized');
      return;
    }
    
    if (!itemId || !itemData) {
      console.error('[IndexedDB] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã itemId –∏–ª–∏ itemData');
      reject('Missing required parameters');
      return;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ inventory
      if (!db.objectStoreNames.contains("inventory")) {
        console.error("[IndexedDB] –•—Ä–∞–Ω–∏–ª–∏—â–µ inventory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ë–î —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä—Å–∏–µ–π
        const request = indexedDB.open("rpgGame", db.version + 1);
        
        request.onupgradeneeded = (event) => {
          const upgradedDb = event.target.result;
          if (!upgradedDb.objectStoreNames.contains("inventory")) {
            const store = upgradedDb.createObjectStore("inventory", { keyPath: "id" });
            store.createIndex("id", "id", { unique: true });
          }
        };
        
        request.onsuccess = (event) => {
          db = event.target.result;
          
          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          updateInventoryItem(itemId, itemData).then(resolve).catch(reject);
        };
        
        request.onerror = (event) => {
          reject(event.target.error);
        };
        
        return;
      }
      
      const transaction = db.transaction(["inventory"], "readwrite");
      const store = transaction.objectStore("inventory");
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞
      const normalizedItem = {
        id: itemId,
        name: itemData.name || itemId,
        quantity: itemData.quantity !== undefined ? parseInt(itemData.quantity) : 0,
        updated: new Date().toISOString()
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      const getRequest = store.get(itemId);
      
      getRequest.onsuccess = (event) => {
        const existingItem = event.target.result;
        
        if (existingItem) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
          const updatedItem = {
            ...existingItem,
            quantity: itemData.quantity !== undefined ? parseInt(itemData.quantity) : existingItem.quantity,
            name: itemData.name || existingItem.name,
            updated: new Date().toISOString()
          };
          
          // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
          if (updatedItem.quantity <= 0) {
            const deleteRequest = store.delete(itemId);
            
            deleteRequest.onsuccess = () => {
              console.log(`[IndexedDB] –ü—Ä–µ–¥–º–µ—Ç ${itemId} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${updatedItem.quantity})`);
              resolve(true);
            };
            
            deleteRequest.onerror = (event) => {
              console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}`);
              reject(event.target.error);
            };
          } else {
            const updateRequest = store.put(updatedItem);
            
            updateRequest.onsuccess = () => {
              resolve(true);
            };
            
            updateRequest.onerror = (event) => {
              console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}`);
              reject(event.target.error);
            };
          }
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0
          if (normalizedItem.quantity > 0) {
            const addRequest = store.add(normalizedItem);
            
            addRequest.onsuccess = () => {
              resolve(true);
            };
            
            addRequest.onerror = (event) => {
              console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}`);
              reject(event.target.error);
            };
          } else {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
            console.log(`[IndexedDB] –ü—Ä–µ–¥–º–µ—Ç ${itemId} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${normalizedItem.quantity})`);
            resolve(true);
          }
        }
      };
      
      getRequest.onerror = (event) => {
        console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}`);
        reject(event.target.error);
      };
      
      transaction.oncomplete = () => {
        // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      };
      
      transaction.onerror = (event) => {
        console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        reject(event.target.error);
      };
    } catch (error) {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error.message);
      reject(error);
    }
  });
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
const getInventoryItems = async () => {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.error('[IndexedDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      reject('Database not initialized');
      return;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ inventory
      if (!db.objectStoreNames.contains("inventory")) {
        console.warn('[IndexedDB] –•—Ä–∞–Ω–∏–ª–∏—â–µ inventory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        resolve([]);
        return;
      }
      
      const transaction = db.transaction(["inventory"], "readonly");
      const store = transaction.objectStore("inventory");
      const request = store.getAll();
      
      request.onsuccess = (event) => {
        const items = event.target.result || [];
        resolve(items);
      };
      
      request.onerror = (event) => {
        console.error(`[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        reject(event.target.error);
      };
    } catch (error) {
      console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error.message);
      reject(error);
    }
  });
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UserResourcesDB
const USER_RESOURCES_DB_NAME = 'UserResourcesDB';
const USER_RESOURCES_DB_VERSION = 10;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å UserResourcesDB
let userResourcesDb;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserResourcesDB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
const initUserResourcesDB = () => {
  return new Promise((resolve, reject) => {
    console.log('[UserResourcesDB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    const request = indexedDB.open(USER_RESOURCES_DB_NAME, USER_RESOURCES_DB_VERSION);
    
    request.onerror = (event) => {
      console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', event.target.error);
      reject(event.target.error);
    };
    
    request.onblocked = (event) => {
      console.warn('[UserResourcesDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.');
      // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É
      try {
        indexedDB.deleteDatabase(USER_RESOURCES_DB_NAME);
        console.log('[UserResourcesDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
      } catch (e) {
        console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
      }
      reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'));
    };
    
    request.onupgradeneeded = (event) => {
      console.log('[UserResourcesDB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ –≤–µ—Ä—Å–∏–∏ 10...');
      const db = event.target.result;
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (db.objectStoreNames.contains('resources')) {
        db.deleteObjectStore('resources');
        console.log('[UserResourcesDB] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "resources"');
      }
      if (db.objectStoreNames.contains('resourcesLog')) {
        db.deleteObjectStore('resourcesLog');
        console.log('[UserResourcesDB] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "resourcesLog"');
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–µ –∫–ª—é—á–∏ (keyPath) –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      const resourcesStore = db.createObjectStore('resources', { keyPath: 'id' });
      resourcesStore.createIndex('telegramId', 'telegramId', { unique: true });
      console.log('[UserResourcesDB] –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "resources" —Å –∫–ª—é—á–æ–º id');
      
      const logsStore = db.createObjectStore('resourcesLog', { autoIncrement: true });
      logsStore.createIndex('telegramId', 'telegramId', { unique: false });
      logsStore.createIndex('timestamp', 'timestamp', { unique: false });
      console.log('[UserResourcesDB] –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ "resourcesLog" —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–º –∫–ª—é—á–æ–º');
    };
    
    request.onsuccess = (event) => {
      userResourcesDb = event.target.result;
      console.log('[UserResourcesDB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞. –í–µ—Ä—Å–∏—è:', userResourcesDb.version);
      resolve(userResourcesDb);
    };
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UserResourcesDB
const saveUserResourcesInUserDB = async (telegramId, resources) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegramId
    if (!telegramId) {
      console.error('[UserResourcesDB] –û—à–∏–±–∫–∞: telegramId –Ω–µ —É–∫–∞–∑–∞–Ω');
      throw new Error('telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–∏–≤–æ–¥–∏–º telegramId –∫ —Å—Ç—Ä–æ–∫–µ –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∑–∞–ø–∏—Å–∏
    const telegramIdStr = String(telegramId);
    const resourceId = `user_${telegramIdStr}`;
    
    console.log(`[UserResourcesDB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å id=${resourceId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramIdStr}:`, resources);
    
    if (!userResourcesDb) {
      await initUserResourcesDB();
    }
    
    return new Promise((resolve, reject) => {
      try {
        const transaction = userResourcesDb.transaction(['resources', 'resourcesLog'], 'readwrite');
        
        transaction.onerror = (event) => {
          console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', event.target.error);
          reject(event.target.error);
        };
        
        const resourcesStore = transaction.objectStore('resources');
        const logsStore = transaction.objectStore('resourcesLog');
        
        // –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ id
        const getRequest = resourcesStore.get(resourceId);
        
        getRequest.onsuccess = (event) => {
          try {
            const currentData = event.target.result;
            const timestamp = new Date().toISOString();
            
            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
            const resourceData = {
              id: resourceId,            // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
              telegramId: telegramIdStr, // –°–æ—Ö—Ä–∞–Ω—è–µ–º telegramId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
              ...resources,
              lastUpdated: timestamp
            };
            
            console.log('[UserResourcesDB] –û–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', resourceData);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
            if (currentData) {
              console.log('[UserResourcesDB] –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', currentData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
              const hasChanges = Object.keys(resources).some(key => 
                resources[key] !== currentData[key]
              );
              
              if (hasChanges) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                const changes = {};
                Object.keys(resources).forEach(key => {
                  if (resources[key] !== currentData[key]) {
                    const oldVal = currentData[key] || 0;
                    const newVal = resources[key];
                    const diff = newVal - oldVal;
                    changes[key] = {
                      old: oldVal,
                      new: newVal,
                      diff: diff
                    };
                    console.log(`[UserResourcesDB] –ò–∑–º–µ–Ω–µ–Ω–∏–µ ${key}: ${oldVal} -> ${newVal} (${diff > 0 ? '+' + diff : diff})`);
                  }
                });
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
                const logEntry = {
                  telegramId: telegramIdStr,
                  timestamp,
                  resourceId,
                  changes,
                  prevData: { ...currentData },
                  newData: { ...resourceData }
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
                const addLogRequest = logsStore.add(logEntry);
                addLogRequest.onerror = (e) => {
                  console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', e.target.error);
                };
              } else {
                console.log('[UserResourcesDB] –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
              }
            } else {
              console.log('[UserResourcesDB] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å');
              
              // –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
              const logEntry = {
                telegramId: telegramIdStr,
                timestamp,
                resourceId,
                type: 'initial',
                data: { ...resourceData }
              };
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
              const addLogRequest = logsStore.add(logEntry);
              addLogRequest.onerror = (e) => {
                console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞:', e.target.error);
              };
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const putRequest = resourcesStore.put(resourceData);
            
            putRequest.onsuccess = () => {
              console.log('[UserResourcesDB] –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å id:', resourceId);
              resolve(true);
            };
            
            putRequest.onerror = (e) => {
              console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:', e.target.error);
              reject(e.target.error);
            };
          } catch (innerError) {
            console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', innerError);
            reject(innerError);
          }
        };
        
        getRequest.onerror = (e) => {
          console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e.target.error);
          reject(e.target.error);
        };
        
        transaction.oncomplete = () => {
          console.log('[UserResourcesDB] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        };
      } catch (transactionError) {
        console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
        reject(transactionError);
      }
    });
  } catch (error) {
    console.error('[UserResourcesDB] –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ UserResourcesDB
const getUserResourcesFromUserDB = async (telegramId) => {
  try {
    if (!telegramId) {
      console.error('[UserResourcesDB] –û—à–∏–±–∫–∞: telegramId –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤');
      throw new Error('telegramId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º id –∑–∞–ø–∏—Å–∏ –∏–∑ telegramId
    const telegramIdStr = String(telegramId);
    const resourceId = `user_${telegramIdStr}`;
    
    console.log(`[UserResourcesDB] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è id=${resourceId}`);
    
    if (!userResourcesDb) {
      await initUserResourcesDB();
    }
    
    return new Promise((resolve, reject) => {
      try {
        const transaction = userResourcesDb.transaction('resources', 'readonly');
        const store = transaction.objectStore('resources');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ id
        const request = store.get(resourceId);
        
        request.onsuccess = (event) => {
          const result = event.target.result;
          
          if (result) {
            console.log('[UserResourcesDB] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–æ–≤:', result);
            resolve(result);
          } else {
            console.log('[UserResourcesDB] –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è id:', resourceId);
            resolve(null);
          }
        };
        
        request.onerror = (e) => {
          console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:', e.target.error);
          reject(e.target.error);
        };
        
        transaction.oncomplete = () => {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        };
      } catch (error) {
        console.error('[UserResourcesDB] –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
        reject(error);
      }
    });
  } catch (error) {
    console.error('[UserResourcesDB] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (onion, candy, junk, coin) –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ IndexedDB
const loadSpecialResourcesIfNeeded = async () => {
  try {
    console.log('[SpecialResources] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let telegramId;
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
      telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
    } else {
      telegramId = localStorage.getItem('telegramId');
    }
    
    if (!telegramId) {
      console.warn('[SpecialResources] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegramId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è telegramId
      console.log('[SpecialResources] –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp...');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è telegramId
      if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && 
          window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
        telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        console.log('[SpecialResources] telegramId –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è:', telegramId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        localStorage.setItem('telegramId', telegramId);
      }
      
      if (!telegramId) {
        console.error('[SpecialResources] telegramId —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.');
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ UserResourcesDB
    const resources = await getUserResourcesFromUserDB(telegramId);
    console.log(`[SpecialResources] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è telegramId ${telegramId}:`, resources);
    
    // –ï—Å–ª–∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (!resources || (!resources.onion && !resources.candy && !resources.junk && !resources.coin)) {
      console.log('[SpecialResources] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      
      try {
        // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const response = await fetch("https://test.tonion.io/wheel.php?action=getScores", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ telegramId })
        });
        
        if (!response.ok) {
          throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
          console.log("[SpecialResources] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:", data);
          
          // –ì–æ—Ç–æ–≤–∏–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
          const specialResources = {
            onion: data.onion || 0,
            candy: data.candy || 0,
            junk: data.junk || 0,
            coin: data.coin || 0,
            streak: data.streak || 0,
            spinsLeft: data.spinsLeft || 0,
            lastUpdated: new Date().toISOString()
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ UserResourcesDB
          try {
            console.log(`[SpecialResources] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è telegramId ${telegramId}:`, specialResources);
            await saveUserResourcesInUserDB(telegramId, specialResources);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã
            const verifyResources = await getUserResourcesFromUserDB(telegramId);
            if (verifyResources && verifyResources.onion) {
              console.log("[SpecialResources] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, —Ä–µ—Å—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ UserResourcesDB:", verifyResources);
            } else {
              console.warn("[SpecialResources] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ä–µ—Å—É—Ä—Å—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ UserResourcesDB");
            }
            
            console.log("[SpecialResources] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ UserResourcesDB");
            
            // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            window.globalUserResources = specialResources;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ rpgDatabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await saveUserResourcesToIndexedDB(specialResources, telegramId);
            
            return true;
          } catch (dbError) {
            console.error("[SpecialResources] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ UserResourcesDB:", dbError);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            window.globalUserResources = specialResources;
            return false;
          }
        } else {
          console.error("[SpecialResources] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:", data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
          return false;
        }
      } catch (serverError) {
        console.error("[SpecialResources] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:", serverError);
        return false;
      }
    } else {
      console.log('[SpecialResources] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ UserResourcesDB:', resources);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
      window.globalUserResources = resources;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ rpgDatabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      try {
        await saveUserResourcesToIndexedDB(resources, telegramId);
        console.log('[SpecialResources] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ rpgDatabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
      } catch (syncError) {
        console.warn('[SpecialResources] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å rpgDatabase:', syncError);
      }
      
      return true;
    }
  } catch (error) {
    console.error('[SpecialResources] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
    return false;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.IndexedDBModule = {
  initDB,
  saveUserResources,
  getUserResources,
  createCraftingSession,
  getActiveCraftingSessions,
  updateCraftingSession,
  deleteCraftingSession,
  updateInventoryItem,
  getInventoryItems,
  saveAppVersion,
  checkAppVersion,
  clearSiteData,
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
  getUserResourcesFromIndexedDB,
  saveUserResourcesToIndexedDB,
  loadSpecialResourcesIfNeeded,
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UserResourcesDB
  initUserResourcesDB,
  getUserResourcesFromUserDB,
  saveUserResourcesInUserDB,
  // –û–±—ä–µ–∫—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Ä—Å–∏—è–º
  get db() { return db; },
  get userResourcesDb() { return userResourcesDb; },
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–µ—Ä—Å–∏–π
  DB_VERSION,
  USER_RESOURCES_DB_VERSION,
  DB_NAME,
  USER_RESOURCES_DB_NAME
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–µ—Ä—Å–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è fallback
window.DB_VERSION = DB_VERSION;
window.USER_RESOURCES_DB_VERSION = USER_RESOURCES_DB_VERSION;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
initDB().then(() => {
  console.log('[IndexedDB] ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  saveAppVersion().catch(error => {
    console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  });
  
  // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserResourcesDB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
  initUserResourcesDB().then(() => {
    console.log('[IndexedDB] ‚úÖ UserResourcesDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–ë–´–¢–ò–ï –û –ì–û–¢–û–í–ù–û–°–¢–ò INDEXEDDB
    const readyEvent = new CustomEvent('indexeddb-ready', {
      detail: {
        timestamp: Date.now(),
        version: DB_APP_VERSION,
        dbVersion: DB_VERSION
      }
    });
    
    document.dispatchEvent(readyEvent);
    console.log('[IndexedDB] üéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ indexeddb-ready');
    
    // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    window.indexedDBReady = true;
    
  }).catch(error => {
    console.error('[IndexedDB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserResourcesDB:', error);
    
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ UserResourcesDB, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    const readyEvent = new CustomEvent('indexeddb-ready', {
      detail: {
        timestamp: Date.now(),
        version: DB_APP_VERSION,
        dbVersion: DB_VERSION,
        userResourcesDbError: true
      }
    });
    
    document.dispatchEvent(readyEvent);
    window.indexedDBReady = true;
  });
}).catch(error => {
  console.error('[IndexedDB] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
});
